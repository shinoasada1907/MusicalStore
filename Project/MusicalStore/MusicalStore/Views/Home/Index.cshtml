@{
    Layout = "_Layout";
    ViewData["Title"] = "Home Page";
    Product product = new Product();
}
<div class="container-fluid">
    <!--Header Category-->
    <div class="d-flex align-items-center position-relative">
        <a href="#" class="btna me-3 text-dark text-decoration-none p-2" onclick="toggleCategoryMenu(event)">
           @*  <i class="bi bi-list me-2 text-dark"></i>Danh mục sản phẩm *@

            <div id="categoryHeader">
                <i class="bi bi-list me-2 text-dark"></i>Danh mục sản phẩm
            </div>

        </a>
        <div id="categoryMenu" class="d-none bg-light border rounded shadow p-3">
            <ul class="list-unstyled m-0">
                @foreach (Category item in Model.Categories)
                {
                    <li class="py-2">
                        <a href="/Home/ListProduct?categoryId=@item.CategoryId" class="text-dark text-decoration-none">@item.CategoryName</a>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- Widget Chat -->
    <div id="chat-widget" class="chat-widget">
        <div class="chat-header">
            <h5 class="fw-bold text-dark mb-3">Thông tin sản phẩm</h5>
            <button id="close-chat" class="close-chat">&times;</button>
        </div>
        <div id="chat-box" class="chat-box">
            <!-- Tin nhắn sẽ hiển thị ở đây -->
        </div>
        <input type="text" id="user-input" class="user-input" placeholder="Hỏi tôi một câu hỏi...">
        <button onclick="sendMessage()" class="send-button">Gửi</button>
    </div>

    <!-- Icon Chat (nút mở widget chat) -->
    <button id="open-chat" class="open-chat">
        <i class="bi bi-chat-dots"></i>
    </button>

    <div style="border-top: 2px solid #AAAAAA; margin: 20px 0;"></div>
    <!--Show Category-->
    <div class="container d-flex justify-content-center align-items-center">
        @* <div class="categories">
            <ul>
                @foreach (Category item in Model.Categories)
                {
                    <li class="">
                        <a href="#" class="text-dark">@item.CategoryName</a>
                    </li>
                }
            </ul>
        </div> *@
        <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <img src="~/images/banner1.png" class="d-block w-100" alt="...">
                </div>
                <div class="carousel-item">
                    <img src="~/images/banner2.png" class="d-block w-100" alt="...">
                </div>
                <div class="carousel-item">
                    <img src="~/images/banner3.png" class="d-block w-100" alt="...">
                </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators"
                data-bs-slide="prev">
                <span class="carousel-control-prev-icon bg-black" aria-hidden="true"></span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators"
                data-bs-slide="next">
                <span class="carousel-control-next-icon bg-black" aria-hidden="true"></span>
            </button>
        </div>
    </div>

    <!--List Top Sale Today-->
    <div class="container my-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Sản phẩm nổi bật</h2>
            @* <a href="#" class="text-decoration-none">Xem tất cả &raquo;</a> *@
        </div>
        <div class="row g-4">
            <!-- Product Card -->
            @foreach (Product item in Model.ProductsSale)
            {
                <div class="col-md-4 col-lg-3 mb-4" onclick="getProductDetail('@item.ProductCode')">
                    <div id="cardproduct" class="card shadow-lg h-100 d-flex flex-column">
                        <!-- Use flex column to fill the card height -->
                        <div class="position-relative">
                            <img src="~/images/@item.ImageUrl" class="card-img-top" alt="@item.ProductName">
                            <span class="badge bg-danger position-absolute top-0 start-0 m-2">Top bán chạy</span>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.ProductName</h5>
                            <p class="card-text small">@item.Description</p>
                            @* <p class="text-muted text-decoration-line-through small">91,400,000 đ</p> *@
                            <div class="d-flex justify-content-between mt-auto">
                                <span class="text-dark fw-bold">@string.Format("{0:N0}", item.Price) VND</span>
                                <div class="">
                                    @* <i class="bi bi-clock me-1 text-danger"></i><span class="text-danger">01:57:38</span> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!--Collection-->
    <div class="container mt-5">
        <h2 class="mb-4">Bộ sưu tập</h2>
        <div class="row">
            @foreach (Collections item in Model.Collections)
            {
                <div class="col-md-3 mb-4">
                    <div id="cardproduct" class="card shadow h-100">
                        <img src="~/images/@item.ImageUrl" class="card-img-top" alt="Tablet">
                        <div class="card-body">
                            <h5 class="card-title">@item.NameCollection</h5>
                        </div>
                        <div class="card-footer bg-white">
                            <a href="/Home/ListCollectionProduct?categoryName=@item.Value" class="btn btn-link">Xem tất cả &gt;</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!--The Product for You-->
    <div id="product-list" class="container mt-5 mb-5">
        <h2 class="mb-4">Dành cho bạn</h2>
        <div class="row g-3">
            @foreach (Product item in Model.ListProduct)
            {
                <div class="col-md-3 col-lg-3" onclick="getProductDetail('@item.ProductCode')">
                    <div id="cardproduct" class="card shadow h-100">
                        <div class="position-relative">
                            <img src="~/images/@item.ImageUrl" class="card-img-top" alt="@item.ProductName">
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.ProductName</h5>
                            <p class="card-text small">@item.Description</p>
                            <div class="d-flex justify-content-between mt-auto">
                                <span class="text-dark fw-bold">@string.Format("{0:N0}", item.Price) VND</span>
                                <div class="">
                                    @* <i class="bi bi-clock me-1 text-danger"></i><span class="text-danger">01:57:38</span> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Pagination -->
        <div class="row justify-content-center mt-4">
            <nav class="">
                <ul class="pagination">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="?page=@(Model.CurrentPage - 1)" tabindex="-1">Trước</a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                            <a class="page-link" href="?page=@i">@i</a>
                        </li>
                    }

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="?page=@(Model.CurrentPage + 1)">Sau</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <!-- Tin tức sự kiện -->
    <div class="container mb-5">
        <h2 class="mb-4">Tin tức - Sự kiện</h2>
        <div class="row">
            @foreach (BlogPost item in Model.News)
            {
                <div class="col-md-3 mb-4">
                    <div id="cardproduct" class="card shadow h-100">
                        <img src="@item.ImageUrl" class="card-img-top" alt="@item.Title">
                        <div class="card-body">
                            <h5 class="card-title">@item.Title</h5>
                        </div>
                        <div class="card-footer bg-white">
                            <a href="/News/Blog?Id=@item.Id" class="btn btn-link">Xem thêm</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* CSS cho widget chat */
    .chat-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 400px;
        height: 400px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        display: none; /* Ẩn chatbox ban đầu */
        flex-direction: column;
        padding: 10px;
        z-index: 9999;
        font-family: Arial, sans-serif;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .close-chat {
        background: none;
        border: none;
        font-size: 20px;
        color: #333;
        cursor: pointer;
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: scroll;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .user-input {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
        margin-bottom: 10px;
    }

    .send-button {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
    }

        .send-button:hover {
            background-color: #0056b3;
        }

    .open-chat {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #343a40;
        color: white;
        border: none;
        padding: 20px;
        width: 60px; /* Đặt chiều rộng cố định */
        height: 60px; /* Đặt chiều cao cố định */
        border-radius: 50%; /* Đảm bảo góc tròn hoàn toàn */
        font-size: 24px;
        cursor: pointer;
        z-index: 10000;
        display: flex; /* Sử dụng flexbox để căn giữa */
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
    }

        .open-chat:hover {
            background-color: #23272b;
        }

        .open-chat i {
            font-size: 24px;
            color: white;
        }


    #categoryHeader {
        font-size: 1.25rem; /* Tăng kích thước chữ */
        font-weight: bold; /* In đậm chữ */
    }


    /* Căn chỉnh menu xuất hiện ngay dưới "Danh mục sản phẩm" */

    #categoryMenu {
        position: absolute; /* Vị trí tương đối với phần tử cha */
        top: 100%; /* Xuất hiện ngay bên dưới */
        left: 0; /* Canh trái với phần tử cha */
        width: 300px; /* Chiều rộng menu */
        z-index: 1050; /* Hiển thị trên các phần tử khác */
        display: none; /* Ẩn mặc định */
        background-color: #ffffff; /* Màu nền sáng */
        border-radius: 10px; /* Bo tròn góc */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Đổ bóng nhẹ */
    }

    #categoryMenu ul {
        margin: 0;
        padding: 0;
        list-style-type: none; /* Loại bỏ dấu đầu dòng */
    }
            #categoryMenu ul li:last-child {
                margin-bottom: 0; /* Loại bỏ khoảng cách ở mục cuối cùng */
            }

            #categoryMenu ul li a {
                display: block; /* Đặt liên kết thành block */
                padding: 10px 15px; /* Tăng khoảng cách trong */
                border-radius: 5px; /* Bo tròn góc liên kết */
                color: #343a40; /* Màu chữ mặc định */
                text-decoration: none; /* Loại bỏ gạch chân mặc định */
                transition: all 0.3s ease; /* Hiệu ứng chuyển đổi mượt */
            }

                #categoryMenu ul li a:hover {
                    background-color: #f1f1f1; /* Màu nền khi hover */
                    color: #007bff; /* Màu chữ khi hover */
                    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2); /* Đổ bóng khi hover */
                    transform: scale(1.02); /* Phóng to nhẹ khi hover */
                }


    .btna {
        cursor: pointer;
    }

    .btn-link{
        justify-content: center; /* Căn giữa theo chiều ngang */
        text-decoration: none; /* Loại bỏ gạch chân mặc định */
        text-decoration-color: black;
        color: black;
        font-size: 1rem;
        font-weight: bold; /* In đậm chữ */
        padding: 0.75rem;
    }

    /* Hiển thị menu khi kích hoạt */
    #categoryMenu.d-block {
        display: block;
    }

    /*Header*/
    .nav-item a {
        color: #333;
    }

    .nav-item a:hover {
        color: #007bff;
    }

    .btna:hover {
        background-color: #CCCCCC;
        border-radius: 7px;
        transition: background-color 0.3s ease-in-out;
    }

    .top-deals {
        color: red;
        font-weight: bold;
    }

    .icon-category {
        font-size: 1.2rem;
    }

    .divider {
        border-left: 1px solid #ddd;
        height: 24px;
        margin: 0 10px;
    }

    /*Slider bar*/
    .container {
        width: 100%;
        margin-top: 20px;
    }

    .categories {
        width: 20%;
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .categories ul {
        list-style: none;
        padding: 0;
    }

    .categories ul li {
        padding: 10px 0;
        border-bottom: 1px solid #ddd;
        display: flex;
        align-items: center;
        font-size: 14px;
        cursor: pointer;
    }

    .categories ul li i {
        margin-right: 10px;
        font-size: 16px;
    }

    a {
        text-decoration: none;
    }

    .carousel {
        width: 80%;
        margin: 0 auto;
    }

    .carousel-inner {
        height: 350px;
    }

    .carousel-inner img {
        height: 100%;
        object-fit: cover;
        width: 100%;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        background-size: 50%;
    }

    .carousel-caption {
        background-color: rgba(0, 0, 0, 0.5);
        padding: 10px;
        border-radius: 5px;
        font-size: 14px;
    }

    /*Top Sale Today*/
    .badge {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .card {
        border: none;
        border-radius: 10px;
        overflow: hidden;
        padding: 10px;
    }

    .card-img-top {
        height: 200px;
        object-fit: contain;
    }

    .card-body {
        padding: 1rem;
    }

    .card-footer {
        font-size: 0.9rem;
        padding: 0.75rem;
    }

    #cardproduct:hover {
        cursor: pointer;
    }
    /* Hover effect for product card images */
    #cardproduct {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        #cardproduct:hover {
            transform: scale(1.05); /* Zoom effect */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* Add shadow on hover */
        }

        #cardproduct img {
            transition: transform 0.3s ease;
        }

        #cardproduct:hover img {
            transform: scale(1.1); /* Zoom the image */
        }
</style>

@section Scripts {
    <script>
        // Get the current page number from the URL (this assumes your page uses query parameters like ?page=1)
        const urlParams = new URLSearchParams(window.location.search);
        const currentPage = parseInt(urlParams.get('page')) || 1; // Default to 1 if not specified

        // Check if we are on a page greater than 1 (not the first page)
        if (currentPage > 1) {
            // Only scroll if we're not on the first page
            const productListSection = document.getElementById("product-list");
            if (productListSection) {
                productListSection.scrollIntoView({ behavior: "smooth" });
            }
        }

        function getProductDetail(id) {
            $.ajax({
                url: '@Url.Action("ProductDetail", "Home")',
                method: 'GET',
                type: 'GET',
                data:{
                    productId: id
                },
                success: function () {
                    window.location.href = "Home/ProductDetail/?productId=" + id
                },
                error: function () { }
            })
        }

        function toggleCategoryMenu(event) {
            event.preventDefault();
            const menu = document.getElementById("categoryMenu");
            if (menu.classList.contains("d-none")) {
                menu.classList.remove("d-none");
                menu.classList.add("d-block");
            } else {
                menu.classList.remove("d-block");
                menu.classList.add("d-none");
            }
        }

        // Đóng menu khi nhấn bên ngoài
        document.addEventListener("click", function (e) {
            const menu = document.getElementById("categoryMenu");
            const button = e.target.closest(".btna");
            if (!menu.contains(e.target) && button === null) {
                menu.classList.remove("d-block");
                menu.classList.add("d-none");
            }
        });



        const apiKey = "sk-...GnYA"; // Thay YOUR_OPENAI_API_KEY bằng API key của bạn
        const chatBox = document.getElementById("chat-box");

            document.getElementById("open-chat").addEventListener("click", function() {
            var chatWidget = document.getElementById("chat-widget");

        // Kiểm tra xem widget đang ẩn hay hiển thị, rồi thay đổi trạng thái
        if (chatWidget.style.display === "none" || chatWidget.style.display === "") {
            chatWidget.style.display = "block";  // Hiển thị widget
        } else {
            chatWidget.style.display = "none";  // Ẩn widget
        }
        });

        // Đóng widget khi nhấn nút đóng
        document.getElementById("close-chat").addEventListener("click", function() {
            var chatWidget = document.getElementById("chat-widget");
            chatWidget.style.display = "none";  // Ẩn widget khi nhấn nút đóng
        });

        function sendMessage() {
            const userInput = document.getElementById("user-input").value;

            if (userInput.trim() !== "") {
                // Hiển thị câu hỏi của người dùng
                chatBox.innerHTML += `<div class="user-message"><strong>Bạn:</strong> ${userInput}</div>`;

                // Gửi yêu cầu tới OpenAI API
                fetchOpenAIResponse(userInput);

                // Xóa ô input sau khi gửi
                document.getElementById("user-input").value = '';
            }
        }

        // Hàm gửi yêu cầu tới OpenAI API
        async function fetchOpenAIResponse(userMessage) {
            const response = await fetch('https://api.openai.com/v1/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                    model: "text-davinci-003", // Bạn có thể thay đổi thành các model khác của OpenAI nếu muốn
                    prompt: userMessage,
                    max_tokens: 150,
                    temperature: 0.7,
                }),
            });

            const data = await response.json();
            const answer = data.choices[0].text.trim();

            // Hiển thị câu trả lời từ ChatGPT
            chatBox.innerHTML += `<div class="gpt-message"><strong>ChatGPT:</strong> ${answer}</div>`;

            // Cuộn xuống dưới cùng khi có tin nhắn mới
            chatBox.scrollTop = chatBox.scrollHeight;
        }

            


    </script>
}